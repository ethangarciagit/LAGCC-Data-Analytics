# -*- coding: utf-8 -*-
"""Python_Project_School_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AdWJYvuquJ9URUnHugVUUxqj4dm7qSuU
"""

#Import libraries: Pandas, Numpy, and MatPlotLib

import pandas as pd
import numpy as np
import matplotlib as plt

#Read in CSV file for NYC School Data
#Create data frame for NYC School Data
#Replace missing/null values

missing_values = ['s','na']
df = pd.read_csv('https://raw.githubusercontent.com/CunyLaguardiaDataAnalytics/datasets/master/2014-15_To_2016-17_School-_Level_NYC_Regents_Report_For_All_Variables.csv', na_values=missing_values)

#View head records of data frame
df.head()

# Check for missing values
missing_values = df.isna().sum()
missing_values

#Exploratory Data Analysis (EDA)
df.describe()

df.info()

#Converting Object Columns to String Data Type
df['School Level'] = df['School Level'].astype('string')
df['School Name'] = df['School Name'].astype('string')
df['School DBN'] = df['School DBN'].astype('string')
df['Regents Exam'] = df['Regents Exam'].astype('string')

#Confirming Column Data Type Changes
df.info()

df.shape

df.head(20)

df.tail(20)

df.duplicated()

#Check Categorical & Numerical Columns
# Categorical columns
categorical_col = [col for col in df.columns if df[col].dtype == 'object']
print('Categorical columns :',categorical_col)
# Numerical columns
numerical_col = [col for col in df.columns if df[col].dtype != 'object']
print('Numerical columns :',numerical_col)

df[categorical_col].nunique()

df1 = df.drop(columns=['Number Scoring CR','Percent Scoring CR'])
df1.shape

#Add Borough Column
df['Borough'] = df['School DBN'].str.slice(2,3)

#Add District Code Column
df['District'] = df['School DBN'].str.slice(3,6)

df.head()

#Check Percentage of Missing Data Per Column

round((df1.isnull().sum()/df1.shape[0])*100,2)

#Mean Imputation
mean = df1['Mean Score'].mean()
df1['Mean Score'].fillna(mean, inplace = True)
df1.isnull().sum()

#Median Imputation
median = df1['Number Scoring Below 65'].median()
df1['Number Scoring Below 65'].fillna(median, inplace = True)

median1 = df1['Percent Scoring Below 65'].median()
df1['Percent Scoring Below 65'].fillna(median1, inplace = True)

median2 = df1['Number Scoring 65 or Above'].median()
df1['Number Scoring 65 or Above'].fillna(median2, inplace = True)

median3 = df1['Percent Scoring 65 or Above'].median()
df1['Percent Scoring 65 or Above'].fillna(median3, inplace = True)

median4 = df1['Number Scoring 80 or Above'].median()
df1['Number Scoring 80 or Above'].fillna(median4, inplace = True)

median5 = df1['Percent Scoring 80 or Above'].median()
df1['Percent Scoring 80 or Above'].fillna(median5, inplace = True)

df1.isnull().sum()

df1.dropna(subset=['Regents Exam'], axis=0, inplace=True)
df1.isnull().sum()

#Statistical Info By School Level (Mean Score)
mean_scores = df1.groupby('School Level')['Mean Score'].mean()
mean_scores

max_scores = df1.groupby('School Level')['Mean Score'].max()
max_scores

min_scores = df1.groupby('School Level')['Mean Score'].min()
min_scores

"""## ***Based on the statistical data provided in the above cells, I decided to drill-down my analysis to the High School grade level due to their scores having the lowest mean score as well as minimum score.***"""

#Filtering out data frame to only contain high school level data
dfHS = df.loc[df['School Level'] == 'High school']

# Creating Sub-Data Frames for each Borough

manhattanFrame = dfHS.loc[dfHS['Borough'] == 'M']
bronxFrame = dfHS.loc[dfHS['Borough'] == 'X']
brooklynFrame = dfHS.loc[dfHS['Borough'] == 'K']
queensFrame = dfHS.loc[dfHS['Borough'] == 'Q']
statenislandFrame = dfHS.loc[dfHS['Borough'] == 'R']

manhattanFrame.groupby('District').apply(display)

for district, data in manhattanFrame.groupby('District'):
  print(district)
  print(data)

manhattanFrameCopy = manhattanFrame.copy()
manhatDists = manhattanFrameCopy.groupby('District')
import math
for district, data in manhattanFrameCopy.groupby('District', as_index=False):
  print(district)
  msNum = pd.to_numeric(data["Mean Score"], errors='coerce').to_frame().reset_index()
  sum = 0
  for x in msNum["Mean Score"]:
    if not math.isnan(x):
      sum += x
  mean = sum / msNum.count()
  print(mean)

"""The lowest mean scoring district in the Borough of Manhattan is district "367" or "01M367"

Mean Score    50.033040
"""

bronxFrameCopy = bronxFrame.copy()
bronxDists = bronxFrameCopy.groupby('District')
import math
for district, data in bronxFrameCopy.groupby('District', as_index=False):
  print(district)
  msNum = pd.to_numeric(data["Mean Score"], errors='coerce').to_frame().reset_index()
  sum = 0
  for x in msNum["Mean Score"]:
    if not math.isnan(x):
      sum += x
  mean = sum / msNum.count()
  print(mean)

"""The district with the lowest mean score in the Borough of Bronx is **504**.

**Mean Score:** 51.860000
"""

brooklynFrameCopy = brooklynFrame.copy()
brooklynDists = brooklynFrameCopy.groupby('District')
import math
for district, data in brooklynFrameCopy.groupby('District', as_index=False):
  print(district)
  msNum = pd.to_numeric(data["Mean Score"], errors='coerce').to_frame().reset_index()
  sum = 0
  for x in msNum["Mean Score"]:
    if not math.isnan(x):
      sum += x
  mean = sum / msNum.count()
  print(mean)

"""The lowest mean score in the *Borough of Brooklyn* was District **639**.

**Mean Score:** 51.668519
"""

queensFrameCopy = queensFrame.copy()
queensDists = queensFrameCopy.groupby('District')
import math
for district, data in queensFrameCopy.groupby('District', as_index=False):
  print(district)
  msNum = pd.to_numeric(data["Mean Score"], errors='coerce').to_frame().reset_index()
  sum = 0
  for x in msNum["Mean Score"]:
    if not math.isnan(x):
      sum += x
  mean = sum / msNum.count()
  print(mean)

"""The lowest mean score in the *Borough of Queens* is District **457**.

**Mean Score:** 53.288276
"""

statenislandFrameCopy = statenislandFrame.copy()
statenDists = statenislandFrameCopy.groupby('District')
import math
for district, data in statenislandFrameCopy.groupby('District', as_index=False):
  print(district)
  msNum = pd.to_numeric(data["Mean Score"], errors='coerce').to_frame().reset_index()
  sum = 0
  for x in msNum["Mean Score"]:
    if not math.isnan(x):
      sum += x
  mean = sum / msNum.count()
  print(mean)

"""The lowest mean score for the *Borough of Staten Island* is District **607**.

**Mean Score:** 55.713725

## ***Based on my observations, the lowest-scoring district is found in the Borough of Manhattan.***
"""

# Next I will filter out the Manhattan DataFrame to only include data from
# District "01M367"

filtered_manhattanFrame = manhattanFrame.loc[manhattanFrame['District'] == '367']

filtered_manhattanFrame.head(50)

# @title Total Tested vs Mean Score

from matplotlib import pyplot as plt
filtered_manhattanFrame.plot(kind='scatter', x='Total Tested', y='Mean Score', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

#Perform count and then average on "Number Scoring Below 65" column

regentsexam_agg = filtered_manhattanFrame.groupby(['Regents Exam'], as_index = False).agg({'Number Scoring Below 65':'sum'})



# Change column A's values to floats
regentsexam_agg['Number Scoring Below 65'] = regentsexam_agg['Number Scoring Below 65'].astype(int)



print(regentsexam_agg)

#Graph of District "01M367" Scores Below 65 by Exam Type
w = 25 # width in inch
h = 12 # height in inch

fig = plt.figure(figsize=(w,h))

ax = fig.add_subplot(111)
plt.subplots_adjust(bottom=0.25)


regentsexam_agg['Regents Exam']
regentsexam_agg['Number Scoring Below 65']
plt.bar(regentsexam_agg['Regents Exam'], regentsexam_agg['Number Scoring Below 65'])
plt.xlabel('Regents Exam')
plt.ylabel('Count')
plt.title('Count of Students Scoring Below 65 By Regents Exam')
plt.show()

"""Based on my observations and analysis, the graph above shows each category for exams with the associated counts of low-scoring students. The exam type with the largest amount of students with a score below 65 is Common Core Alegebra. I believe Algebra is the first higher-level Math you learn as a High School student so it makes sense that many students would struggle in this area of math. Not to mention, as freshman, they're still adjusting to the high school curriculum and the new level of difficulty in each of their courses."""